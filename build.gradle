/*
 * Copyright 2017-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-library'
    id 'groovy'

    id  'net.ltgt.errorprone' version "0.0.10"

    id 'nebula.project' version '3.4.0'
    id "nebula.resolution-rules" version "3.0.3"
    id 'nebula.nebula-bintray' version '3.5.2'
    id 'nebula.maven-publish' version '5.1.1'
    id 'nebula.maven-apache-license' version '5.1.1'
    id 'nebula.javadoc-jar' version '5.1.1'
    id 'nebula.source-jar' version '5.1.1'
    id 'nebula.info' version '3.6.0'
    id 'nebula.info-owners' version '3.6.0'

    // TODO - include dependency info from nebula info broker (reports) somewhere...
}

sourceCompatibility = 8
targetCompatibility = 8
group 'com.digitalascent'

repositories {
    jcenter()
}

tasks.withType(JavaCompile) {

    configure(options) {
        // http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.h#BHCJCABJ
        ext.lintOpts = ["serial", "varargs", "cast", "classfile", "dep-ann", "divzero", "empty", "finally",
                        "overrides", "path", "processing", "static", "try", "fallthrough", "rawtypes", "deprecation",
                        "unchecked", "-options"].collect { "-Xlint:${it}" }

        // configure Google Error Prone: https://github.com/tbroyer/gradle-errorprone-plugin, http://errorprone.info/
        ext.errorProneOptsError = ["AssertFalse", "BigDecimalLiteralDouble", "ConstructorInvokesOverridable",  "EmptyTopLevelDeclaration", "MissingDefault",
                                   "NonCanonicalStaticMemberImport", "PrimitiveArrayPassedToVarargsMethod", "RedundantThrows", "StaticQualifiedUsingExpression", "StringEquality",
                                   "UnnecessaryDefaultInEnumSwitch", "WildcardImport", "MultipleTopLevelClasses", "MultiVariableDeclaration", "MixedArrayDimensions", "MethodCanBeStatic",
                                   "LiteralClassName", "PrivateConstructorForUtilityClass", "PackageLocation", "ConstantField"].collect {
            "-Xep:${it}:ERROR"
        }

        // TODO - re-enable once https://github.com/google/error-prone/issues/472 is fixed
        // "ReturnMissingNullable", "FieldMissingNullable", "ParameterNotNullable",

        // "ConstructorLeaksThis",

        ext.errorProneOptsWarning = [].collect { "-Xep:${it}:WARNING" }
        ext.errorProneOptsOff = [].collect { "-Xep:${it}:OFF" }

        // http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html
        // -Werror - terminates compilation when warnings occur
        ext.generalArgs = ["-Werror"]

        compilerArgs += errorProneOptsError
        compilerArgs += errorProneOptsWarning
        compilerArgs += errorProneOptsOff
        compilerArgs += lintOpts
        compilerArgs += generalArgs
        encoding = 'UTF-8'
    }
}

sourceSets {
    test {
        output.resourcesDir = "build/classes/test"
    }
}

nebulaResolutionRules {
    optional = ['slf4j-bridge']
}

ext.versions = [
        "guava" : "23.0",
        "slf4j" : "1.7.25",
        "jackson": "2.8.9"
]

dependencies {

    resolutionRules 'com.netflix.nebula:gradle-resolution-rules:latest.release'

    api "org.codehaus.groovy:groovy-all:2.4.12"

    implementation "org.slf4j:slf4j-api:${versions.slf4j}"
    implementation "com.google.guava:guava:${versions.guava}"

    implementation "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"

    testImplementation 'junit:junit:4.12'

    testImplementation "org.spockframework:spock-core:1.1-groovy-2.4"
    testRuntimeOnly('com.athaydes:spock-reports:1.3.1') {
        transitive = false // this avoids affecting version of Groovy/Spock
    }

    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: versions.slf4j
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.1"
}

contacts {
    'chris@digitalascent.com' {
        moniker 'Chris Lee'
        github 'cslee00'
        role 'owner'
        role 'notify'
    }
}


/*
EXIT_STATUS=0
echo "Publishing archives for branch $TRAVIS_BRANCH"
if [[ -n $TRAVIS_TAG ]] || [[ $TRAVIS_BRANCH == 'master' && $TRAVIS_PULL_REQUEST == 'false' ]]; then
  if [[ -n $TRAVIS_TAG ]]; then
    echo "Pushing build to Bintray"
    ./gradlew bintrayUpload || EXIT_STATUS=$?
  else
    echo "Publishing snapshot to OJO"
    ./gradlew artifactoryPublish || EXIT_STATUS=$?
  fi
fi
exit $EXIT_STATUS
fi
 */
/*
if tagged && (on master branch && ! pull request) {
    if( tagged ) {
        bintray
    } else {
        ojo
    }



}
 */
bintray {
    dryRun = false
    pkg {
        repo = 'com.digitalascent'
        userOrg = ''
        websiteUrl = 'https://github.com/cslee00/${project.name}'
        issueTrackerUrl = 'https://github.com/cslee00/${project.name}/issues'
        vcsUrl = 'https://github.com/cslee00/${project.name}.git'
        labels = ['cloudformation', 'groovy', 'dsl', 'aws']
        version {
            name = project.version
            vcsTag = project.version
            attributes = [:]
        }
    }
}

task "release"  {
    dependsOn = [bintrayUpload,artifactoryPublish]
    def isSnapshot = version.endsWith("SNAPSHOT")

    project.artifactoryPublish.enabled = false
    project.bintrayUpload.enabled = false

    /*project.artifactoryPublish.enabled = isSnapshot
    project.bintrayUpload.enabled = !isSnapshot*/

    ext.tag = System.getenv("TRAVIS_TAG")
    ext.branch = System.getenv("TRAVIS_BRANCH")
    ext.pullRequest = System.getenv("TRAVIS_PULL_REQUEST")

    if ( tag || (branch == 'master' && pullRequest == 'false')) {
        if( tag && !isSnapshot ) {
            println "Publishing to Bintray"
            bintrayUpload.enabled = true
        } else {
            println "Publishing to OJO"
            artifactoryPublish.enabled = true
        }
    }
}
